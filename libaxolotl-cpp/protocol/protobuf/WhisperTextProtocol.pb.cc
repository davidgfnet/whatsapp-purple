// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf/WhisperTextProtocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protobuf/WhisperTextProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace textsecure {

namespace {

const ::google::protobuf::Descriptor* WhisperMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WhisperMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* PreKeyWhisperMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PreKeyWhisperMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeyExchangeMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyExchangeMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* SenderKeyMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SenderKeyMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* SenderKeyDistributionMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SenderKeyDistributionMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_protobuf_2fWhisperTextProtocol_2eproto() {
  protobuf_AddDesc_protobuf_2fWhisperTextProtocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protobuf/WhisperTextProtocol.proto");
  GOOGLE_CHECK(file != NULL);
  WhisperMessage_descriptor_ = file->message_type(0);
  static const int WhisperMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhisperMessage, ratchetkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhisperMessage, counter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhisperMessage, previouscounter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhisperMessage, ciphertext_),
  };
  WhisperMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WhisperMessage_descriptor_,
      WhisperMessage::default_instance_,
      WhisperMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhisperMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhisperMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WhisperMessage));
  PreKeyWhisperMessage_descriptor_ = file->message_type(1);
  static const int PreKeyWhisperMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreKeyWhisperMessage, registrationid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreKeyWhisperMessage, prekeyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreKeyWhisperMessage, signedprekeyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreKeyWhisperMessage, basekey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreKeyWhisperMessage, identitykey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreKeyWhisperMessage, message_),
  };
  PreKeyWhisperMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PreKeyWhisperMessage_descriptor_,
      PreKeyWhisperMessage::default_instance_,
      PreKeyWhisperMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreKeyWhisperMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreKeyWhisperMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PreKeyWhisperMessage));
  KeyExchangeMessage_descriptor_ = file->message_type(2);
  static const int KeyExchangeMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyExchangeMessage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyExchangeMessage, basekey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyExchangeMessage, ratchetkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyExchangeMessage, identitykey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyExchangeMessage, basekeysignature_),
  };
  KeyExchangeMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeyExchangeMessage_descriptor_,
      KeyExchangeMessage::default_instance_,
      KeyExchangeMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyExchangeMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyExchangeMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeyExchangeMessage));
  SenderKeyMessage_descriptor_ = file->message_type(3);
  static const int SenderKeyMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SenderKeyMessage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SenderKeyMessage, iteration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SenderKeyMessage, ciphertext_),
  };
  SenderKeyMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SenderKeyMessage_descriptor_,
      SenderKeyMessage::default_instance_,
      SenderKeyMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SenderKeyMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SenderKeyMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SenderKeyMessage));
  SenderKeyDistributionMessage_descriptor_ = file->message_type(4);
  static const int SenderKeyDistributionMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SenderKeyDistributionMessage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SenderKeyDistributionMessage, iteration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SenderKeyDistributionMessage, chainkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SenderKeyDistributionMessage, signingkey_),
  };
  SenderKeyDistributionMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SenderKeyDistributionMessage_descriptor_,
      SenderKeyDistributionMessage::default_instance_,
      SenderKeyDistributionMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SenderKeyDistributionMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SenderKeyDistributionMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SenderKeyDistributionMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protobuf_2fWhisperTextProtocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WhisperMessage_descriptor_, &WhisperMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PreKeyWhisperMessage_descriptor_, &PreKeyWhisperMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeyExchangeMessage_descriptor_, &KeyExchangeMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SenderKeyMessage_descriptor_, &SenderKeyMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SenderKeyDistributionMessage_descriptor_, &SenderKeyDistributionMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protobuf_2fWhisperTextProtocol_2eproto() {
  delete WhisperMessage::default_instance_;
  delete WhisperMessage_reflection_;
  delete PreKeyWhisperMessage::default_instance_;
  delete PreKeyWhisperMessage_reflection_;
  delete KeyExchangeMessage::default_instance_;
  delete KeyExchangeMessage_reflection_;
  delete SenderKeyMessage::default_instance_;
  delete SenderKeyMessage_reflection_;
  delete SenderKeyDistributionMessage::default_instance_;
  delete SenderKeyDistributionMessage_reflection_;
}

void protobuf_AddDesc_protobuf_2fWhisperTextProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\"protobuf/WhisperTextProtocol.proto\022\nte"
    "xtsecure\"b\n\016WhisperMessage\022\022\n\nratchetKey"
    "\030\001 \001(\014\022\017\n\007counter\030\002 \001(\r\022\027\n\017previousCount"
    "er\030\003 \001(\r\022\022\n\nciphertext\030\004 \001(\014\"\217\001\n\024PreKeyW"
    "hisperMessage\022\026\n\016registrationId\030\005 \001(\r\022\020\n"
    "\010preKeyId\030\001 \001(\r\022\026\n\016signedPreKeyId\030\006 \001(\r\022"
    "\017\n\007baseKey\030\002 \001(\014\022\023\n\013identityKey\030\003 \001(\014\022\017\n"
    "\007message\030\004 \001(\014\"t\n\022KeyExchangeMessage\022\n\n\002"
    "id\030\001 \001(\r\022\017\n\007baseKey\030\002 \001(\014\022\022\n\nratchetKey\030"
    "\003 \001(\014\022\023\n\013identityKey\030\004 \001(\014\022\030\n\020baseKeySig"
    "nature\030\005 \001(\014\"E\n\020SenderKeyMessage\022\n\n\002id\030\001"
    " \001(\r\022\021\n\titeration\030\002 \001(\r\022\022\n\nciphertext\030\003 "
    "\001(\014\"c\n\034SenderKeyDistributionMessage\022\n\n\002i"
    "d\030\001 \001(\r\022\021\n\titeration\030\002 \001(\r\022\020\n\010chainKey\030\003"
    " \001(\014\022\022\n\nsigningKey\030\004 \001(\014B7\n&org.whispers"
    "ystems.libaxolotl.protocolB\rWhisperProto"
    "s", 641);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protobuf/WhisperTextProtocol.proto", &protobuf_RegisterTypes);
  WhisperMessage::default_instance_ = new WhisperMessage();
  PreKeyWhisperMessage::default_instance_ = new PreKeyWhisperMessage();
  KeyExchangeMessage::default_instance_ = new KeyExchangeMessage();
  SenderKeyMessage::default_instance_ = new SenderKeyMessage();
  SenderKeyDistributionMessage::default_instance_ = new SenderKeyDistributionMessage();
  WhisperMessage::default_instance_->InitAsDefaultInstance();
  PreKeyWhisperMessage::default_instance_->InitAsDefaultInstance();
  KeyExchangeMessage::default_instance_->InitAsDefaultInstance();
  SenderKeyMessage::default_instance_->InitAsDefaultInstance();
  SenderKeyDistributionMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protobuf_2fWhisperTextProtocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protobuf_2fWhisperTextProtocol_2eproto {
  StaticDescriptorInitializer_protobuf_2fWhisperTextProtocol_2eproto() {
    protobuf_AddDesc_protobuf_2fWhisperTextProtocol_2eproto();
  }
} static_descriptor_initializer_protobuf_2fWhisperTextProtocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int WhisperMessage::kRatchetKeyFieldNumber;
const int WhisperMessage::kCounterFieldNumber;
const int WhisperMessage::kPreviousCounterFieldNumber;
const int WhisperMessage::kCiphertextFieldNumber;
#endif  // !_MSC_VER

WhisperMessage::WhisperMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WhisperMessage::InitAsDefaultInstance() {
}

WhisperMessage::WhisperMessage(const WhisperMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WhisperMessage::SharedCtor() {
  _cached_size_ = 0;
  ratchetkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  counter_ = 0u;
  previouscounter_ = 0u;
  ciphertext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WhisperMessage::~WhisperMessage() {
  SharedDtor();
}

void WhisperMessage::SharedDtor() {
  if (ratchetkey_ != &::google::protobuf::internal::kEmptyString) {
    delete ratchetkey_;
  }
  if (ciphertext_ != &::google::protobuf::internal::kEmptyString) {
    delete ciphertext_;
  }
  if (this != default_instance_) {
  }
}

void WhisperMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WhisperMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WhisperMessage_descriptor_;
}

const WhisperMessage& WhisperMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2fWhisperTextProtocol_2eproto();
  return *default_instance_;
}

WhisperMessage* WhisperMessage::default_instance_ = NULL;

WhisperMessage* WhisperMessage::New() const {
  return new WhisperMessage;
}

void WhisperMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ratchetkey()) {
      if (ratchetkey_ != &::google::protobuf::internal::kEmptyString) {
        ratchetkey_->clear();
      }
    }
    counter_ = 0u;
    previouscounter_ = 0u;
    if (has_ciphertext()) {
      if (ciphertext_ != &::google::protobuf::internal::kEmptyString) {
        ciphertext_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WhisperMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes ratchetKey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ratchetkey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_counter;
        break;
      }

      // optional uint32 counter = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_counter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &counter_)));
          set_has_counter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_previousCounter;
        break;
      }

      // optional uint32 previousCounter = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_previousCounter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &previouscounter_)));
          set_has_previouscounter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ciphertext;
        break;
      }

      // optional bytes ciphertext = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ciphertext:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ciphertext()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WhisperMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes ratchetKey = 1;
  if (has_ratchetkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->ratchetkey(), output);
  }

  // optional uint32 counter = 2;
  if (has_counter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->counter(), output);
  }

  // optional uint32 previousCounter = 3;
  if (has_previouscounter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->previouscounter(), output);
  }

  // optional bytes ciphertext = 4;
  if (has_ciphertext()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->ciphertext(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WhisperMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes ratchetKey = 1;
  if (has_ratchetkey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ratchetkey(), target);
  }

  // optional uint32 counter = 2;
  if (has_counter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->counter(), target);
  }

  // optional uint32 previousCounter = 3;
  if (has_previouscounter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->previouscounter(), target);
  }

  // optional bytes ciphertext = 4;
  if (has_ciphertext()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->ciphertext(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WhisperMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes ratchetKey = 1;
    if (has_ratchetkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ratchetkey());
    }

    // optional uint32 counter = 2;
    if (has_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->counter());
    }

    // optional uint32 previousCounter = 3;
    if (has_previouscounter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->previouscounter());
    }

    // optional bytes ciphertext = 4;
    if (has_ciphertext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ciphertext());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WhisperMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WhisperMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WhisperMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WhisperMessage::MergeFrom(const WhisperMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ratchetkey()) {
      set_ratchetkey(from.ratchetkey());
    }
    if (from.has_counter()) {
      set_counter(from.counter());
    }
    if (from.has_previouscounter()) {
      set_previouscounter(from.previouscounter());
    }
    if (from.has_ciphertext()) {
      set_ciphertext(from.ciphertext());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WhisperMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WhisperMessage::CopyFrom(const WhisperMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WhisperMessage::IsInitialized() const {

  return true;
}

void WhisperMessage::Swap(WhisperMessage* other) {
  if (other != this) {
    std::swap(ratchetkey_, other->ratchetkey_);
    std::swap(counter_, other->counter_);
    std::swap(previouscounter_, other->previouscounter_);
    std::swap(ciphertext_, other->ciphertext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WhisperMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WhisperMessage_descriptor_;
  metadata.reflection = WhisperMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PreKeyWhisperMessage::kRegistrationIdFieldNumber;
const int PreKeyWhisperMessage::kPreKeyIdFieldNumber;
const int PreKeyWhisperMessage::kSignedPreKeyIdFieldNumber;
const int PreKeyWhisperMessage::kBaseKeyFieldNumber;
const int PreKeyWhisperMessage::kIdentityKeyFieldNumber;
const int PreKeyWhisperMessage::kMessageFieldNumber;
#endif  // !_MSC_VER

PreKeyWhisperMessage::PreKeyWhisperMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PreKeyWhisperMessage::InitAsDefaultInstance() {
}

PreKeyWhisperMessage::PreKeyWhisperMessage(const PreKeyWhisperMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PreKeyWhisperMessage::SharedCtor() {
  _cached_size_ = 0;
  registrationid_ = 0u;
  prekeyid_ = 0u;
  signedprekeyid_ = 0u;
  basekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  identitykey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PreKeyWhisperMessage::~PreKeyWhisperMessage() {
  SharedDtor();
}

void PreKeyWhisperMessage::SharedDtor() {
  if (basekey_ != &::google::protobuf::internal::kEmptyString) {
    delete basekey_;
  }
  if (identitykey_ != &::google::protobuf::internal::kEmptyString) {
    delete identitykey_;
  }
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void PreKeyWhisperMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PreKeyWhisperMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PreKeyWhisperMessage_descriptor_;
}

const PreKeyWhisperMessage& PreKeyWhisperMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2fWhisperTextProtocol_2eproto();
  return *default_instance_;
}

PreKeyWhisperMessage* PreKeyWhisperMessage::default_instance_ = NULL;

PreKeyWhisperMessage* PreKeyWhisperMessage::New() const {
  return new PreKeyWhisperMessage;
}

void PreKeyWhisperMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    registrationid_ = 0u;
    prekeyid_ = 0u;
    signedprekeyid_ = 0u;
    if (has_basekey()) {
      if (basekey_ != &::google::protobuf::internal::kEmptyString) {
        basekey_->clear();
      }
    }
    if (has_identitykey()) {
      if (identitykey_ != &::google::protobuf::internal::kEmptyString) {
        identitykey_->clear();
      }
    }
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PreKeyWhisperMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 preKeyId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prekeyid_)));
          set_has_prekeyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_baseKey;
        break;
      }

      // optional bytes baseKey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_baseKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_basekey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_identityKey;
        break;
      }

      // optional bytes identityKey = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_identityKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_identitykey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_message;
        break;
      }

      // optional bytes message = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_registrationId;
        break;
      }

      // optional uint32 registrationId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_registrationId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &registrationid_)));
          set_has_registrationid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_signedPreKeyId;
        break;
      }

      // optional uint32 signedPreKeyId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signedPreKeyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &signedprekeyid_)));
          set_has_signedprekeyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PreKeyWhisperMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 preKeyId = 1;
  if (has_prekeyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->prekeyid(), output);
  }

  // optional bytes baseKey = 2;
  if (has_basekey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->basekey(), output);
  }

  // optional bytes identityKey = 3;
  if (has_identitykey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->identitykey(), output);
  }

  // optional bytes message = 4;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->message(), output);
  }

  // optional uint32 registrationId = 5;
  if (has_registrationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->registrationid(), output);
  }

  // optional uint32 signedPreKeyId = 6;
  if (has_signedprekeyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->signedprekeyid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PreKeyWhisperMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 preKeyId = 1;
  if (has_prekeyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->prekeyid(), target);
  }

  // optional bytes baseKey = 2;
  if (has_basekey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->basekey(), target);
  }

  // optional bytes identityKey = 3;
  if (has_identitykey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->identitykey(), target);
  }

  // optional bytes message = 4;
  if (has_message()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->message(), target);
  }

  // optional uint32 registrationId = 5;
  if (has_registrationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->registrationid(), target);
  }

  // optional uint32 signedPreKeyId = 6;
  if (has_signedprekeyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->signedprekeyid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PreKeyWhisperMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 registrationId = 5;
    if (has_registrationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->registrationid());
    }

    // optional uint32 preKeyId = 1;
    if (has_prekeyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prekeyid());
    }

    // optional uint32 signedPreKeyId = 6;
    if (has_signedprekeyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->signedprekeyid());
    }

    // optional bytes baseKey = 2;
    if (has_basekey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->basekey());
    }

    // optional bytes identityKey = 3;
    if (has_identitykey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->identitykey());
    }

    // optional bytes message = 4;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PreKeyWhisperMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PreKeyWhisperMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PreKeyWhisperMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PreKeyWhisperMessage::MergeFrom(const PreKeyWhisperMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_registrationid()) {
      set_registrationid(from.registrationid());
    }
    if (from.has_prekeyid()) {
      set_prekeyid(from.prekeyid());
    }
    if (from.has_signedprekeyid()) {
      set_signedprekeyid(from.signedprekeyid());
    }
    if (from.has_basekey()) {
      set_basekey(from.basekey());
    }
    if (from.has_identitykey()) {
      set_identitykey(from.identitykey());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PreKeyWhisperMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreKeyWhisperMessage::CopyFrom(const PreKeyWhisperMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreKeyWhisperMessage::IsInitialized() const {

  return true;
}

void PreKeyWhisperMessage::Swap(PreKeyWhisperMessage* other) {
  if (other != this) {
    std::swap(registrationid_, other->registrationid_);
    std::swap(prekeyid_, other->prekeyid_);
    std::swap(signedprekeyid_, other->signedprekeyid_);
    std::swap(basekey_, other->basekey_);
    std::swap(identitykey_, other->identitykey_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PreKeyWhisperMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PreKeyWhisperMessage_descriptor_;
  metadata.reflection = PreKeyWhisperMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeyExchangeMessage::kIdFieldNumber;
const int KeyExchangeMessage::kBaseKeyFieldNumber;
const int KeyExchangeMessage::kRatchetKeyFieldNumber;
const int KeyExchangeMessage::kIdentityKeyFieldNumber;
const int KeyExchangeMessage::kBaseKeySignatureFieldNumber;
#endif  // !_MSC_VER

KeyExchangeMessage::KeyExchangeMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KeyExchangeMessage::InitAsDefaultInstance() {
}

KeyExchangeMessage::KeyExchangeMessage(const KeyExchangeMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KeyExchangeMessage::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  basekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ratchetkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  identitykey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  basekeysignature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyExchangeMessage::~KeyExchangeMessage() {
  SharedDtor();
}

void KeyExchangeMessage::SharedDtor() {
  if (basekey_ != &::google::protobuf::internal::kEmptyString) {
    delete basekey_;
  }
  if (ratchetkey_ != &::google::protobuf::internal::kEmptyString) {
    delete ratchetkey_;
  }
  if (identitykey_ != &::google::protobuf::internal::kEmptyString) {
    delete identitykey_;
  }
  if (basekeysignature_ != &::google::protobuf::internal::kEmptyString) {
    delete basekeysignature_;
  }
  if (this != default_instance_) {
  }
}

void KeyExchangeMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyExchangeMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyExchangeMessage_descriptor_;
}

const KeyExchangeMessage& KeyExchangeMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2fWhisperTextProtocol_2eproto();
  return *default_instance_;
}

KeyExchangeMessage* KeyExchangeMessage::default_instance_ = NULL;

KeyExchangeMessage* KeyExchangeMessage::New() const {
  return new KeyExchangeMessage;
}

void KeyExchangeMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_basekey()) {
      if (basekey_ != &::google::protobuf::internal::kEmptyString) {
        basekey_->clear();
      }
    }
    if (has_ratchetkey()) {
      if (ratchetkey_ != &::google::protobuf::internal::kEmptyString) {
        ratchetkey_->clear();
      }
    }
    if (has_identitykey()) {
      if (identitykey_ != &::google::protobuf::internal::kEmptyString) {
        identitykey_->clear();
      }
    }
    if (has_basekeysignature()) {
      if (basekeysignature_ != &::google::protobuf::internal::kEmptyString) {
        basekeysignature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeyExchangeMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_baseKey;
        break;
      }

      // optional bytes baseKey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_baseKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_basekey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ratchetKey;
        break;
      }

      // optional bytes ratchetKey = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ratchetKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ratchetkey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_identityKey;
        break;
      }

      // optional bytes identityKey = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_identityKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_identitykey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_baseKeySignature;
        break;
      }

      // optional bytes baseKeySignature = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_baseKeySignature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_basekeysignature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KeyExchangeMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional bytes baseKey = 2;
  if (has_basekey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->basekey(), output);
  }

  // optional bytes ratchetKey = 3;
  if (has_ratchetkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->ratchetkey(), output);
  }

  // optional bytes identityKey = 4;
  if (has_identitykey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->identitykey(), output);
  }

  // optional bytes baseKeySignature = 5;
  if (has_basekeysignature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->basekeysignature(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KeyExchangeMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional bytes baseKey = 2;
  if (has_basekey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->basekey(), target);
  }

  // optional bytes ratchetKey = 3;
  if (has_ratchetkey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->ratchetkey(), target);
  }

  // optional bytes identityKey = 4;
  if (has_identitykey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->identitykey(), target);
  }

  // optional bytes baseKeySignature = 5;
  if (has_basekeysignature()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->basekeysignature(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KeyExchangeMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional bytes baseKey = 2;
    if (has_basekey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->basekey());
    }

    // optional bytes ratchetKey = 3;
    if (has_ratchetkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ratchetkey());
    }

    // optional bytes identityKey = 4;
    if (has_identitykey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->identitykey());
    }

    // optional bytes baseKeySignature = 5;
    if (has_basekeysignature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->basekeysignature());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyExchangeMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeyExchangeMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeyExchangeMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyExchangeMessage::MergeFrom(const KeyExchangeMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_basekey()) {
      set_basekey(from.basekey());
    }
    if (from.has_ratchetkey()) {
      set_ratchetkey(from.ratchetkey());
    }
    if (from.has_identitykey()) {
      set_identitykey(from.identitykey());
    }
    if (from.has_basekeysignature()) {
      set_basekeysignature(from.basekeysignature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeyExchangeMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyExchangeMessage::CopyFrom(const KeyExchangeMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyExchangeMessage::IsInitialized() const {

  return true;
}

void KeyExchangeMessage::Swap(KeyExchangeMessage* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(basekey_, other->basekey_);
    std::swap(ratchetkey_, other->ratchetkey_);
    std::swap(identitykey_, other->identitykey_);
    std::swap(basekeysignature_, other->basekeysignature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeyExchangeMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyExchangeMessage_descriptor_;
  metadata.reflection = KeyExchangeMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SenderKeyMessage::kIdFieldNumber;
const int SenderKeyMessage::kIterationFieldNumber;
const int SenderKeyMessage::kCiphertextFieldNumber;
#endif  // !_MSC_VER

SenderKeyMessage::SenderKeyMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SenderKeyMessage::InitAsDefaultInstance() {
}

SenderKeyMessage::SenderKeyMessage(const SenderKeyMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SenderKeyMessage::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  iteration_ = 0u;
  ciphertext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SenderKeyMessage::~SenderKeyMessage() {
  SharedDtor();
}

void SenderKeyMessage::SharedDtor() {
  if (ciphertext_ != &::google::protobuf::internal::kEmptyString) {
    delete ciphertext_;
  }
  if (this != default_instance_) {
  }
}

void SenderKeyMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SenderKeyMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SenderKeyMessage_descriptor_;
}

const SenderKeyMessage& SenderKeyMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2fWhisperTextProtocol_2eproto();
  return *default_instance_;
}

SenderKeyMessage* SenderKeyMessage::default_instance_ = NULL;

SenderKeyMessage* SenderKeyMessage::New() const {
  return new SenderKeyMessage;
}

void SenderKeyMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    iteration_ = 0u;
    if (has_ciphertext()) {
      if (ciphertext_ != &::google::protobuf::internal::kEmptyString) {
        ciphertext_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SenderKeyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iteration;
        break;
      }

      // optional uint32 iteration = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iteration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iteration_)));
          set_has_iteration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ciphertext;
        break;
      }

      // optional bytes ciphertext = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ciphertext:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ciphertext()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SenderKeyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 iteration = 2;
  if (has_iteration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->iteration(), output);
  }

  // optional bytes ciphertext = 3;
  if (has_ciphertext()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->ciphertext(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SenderKeyMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 iteration = 2;
  if (has_iteration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->iteration(), target);
  }

  // optional bytes ciphertext = 3;
  if (has_ciphertext()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->ciphertext(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SenderKeyMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 iteration = 2;
    if (has_iteration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iteration());
    }

    // optional bytes ciphertext = 3;
    if (has_ciphertext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ciphertext());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SenderKeyMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SenderKeyMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SenderKeyMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SenderKeyMessage::MergeFrom(const SenderKeyMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_iteration()) {
      set_iteration(from.iteration());
    }
    if (from.has_ciphertext()) {
      set_ciphertext(from.ciphertext());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SenderKeyMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SenderKeyMessage::CopyFrom(const SenderKeyMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SenderKeyMessage::IsInitialized() const {

  return true;
}

void SenderKeyMessage::Swap(SenderKeyMessage* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(iteration_, other->iteration_);
    std::swap(ciphertext_, other->ciphertext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SenderKeyMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SenderKeyMessage_descriptor_;
  metadata.reflection = SenderKeyMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SenderKeyDistributionMessage::kIdFieldNumber;
const int SenderKeyDistributionMessage::kIterationFieldNumber;
const int SenderKeyDistributionMessage::kChainKeyFieldNumber;
const int SenderKeyDistributionMessage::kSigningKeyFieldNumber;
#endif  // !_MSC_VER

SenderKeyDistributionMessage::SenderKeyDistributionMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SenderKeyDistributionMessage::InitAsDefaultInstance() {
}

SenderKeyDistributionMessage::SenderKeyDistributionMessage(const SenderKeyDistributionMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SenderKeyDistributionMessage::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  iteration_ = 0u;
  chainkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signingkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SenderKeyDistributionMessage::~SenderKeyDistributionMessage() {
  SharedDtor();
}

void SenderKeyDistributionMessage::SharedDtor() {
  if (chainkey_ != &::google::protobuf::internal::kEmptyString) {
    delete chainkey_;
  }
  if (signingkey_ != &::google::protobuf::internal::kEmptyString) {
    delete signingkey_;
  }
  if (this != default_instance_) {
  }
}

void SenderKeyDistributionMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SenderKeyDistributionMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SenderKeyDistributionMessage_descriptor_;
}

const SenderKeyDistributionMessage& SenderKeyDistributionMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2fWhisperTextProtocol_2eproto();
  return *default_instance_;
}

SenderKeyDistributionMessage* SenderKeyDistributionMessage::default_instance_ = NULL;

SenderKeyDistributionMessage* SenderKeyDistributionMessage::New() const {
  return new SenderKeyDistributionMessage;
}

void SenderKeyDistributionMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    iteration_ = 0u;
    if (has_chainkey()) {
      if (chainkey_ != &::google::protobuf::internal::kEmptyString) {
        chainkey_->clear();
      }
    }
    if (has_signingkey()) {
      if (signingkey_ != &::google::protobuf::internal::kEmptyString) {
        signingkey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SenderKeyDistributionMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iteration;
        break;
      }

      // optional uint32 iteration = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iteration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iteration_)));
          set_has_iteration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_chainKey;
        break;
      }

      // optional bytes chainKey = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chainKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chainkey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_signingKey;
        break;
      }

      // optional bytes signingKey = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signingKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signingkey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SenderKeyDistributionMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 iteration = 2;
  if (has_iteration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->iteration(), output);
  }

  // optional bytes chainKey = 3;
  if (has_chainkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->chainkey(), output);
  }

  // optional bytes signingKey = 4;
  if (has_signingkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->signingkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SenderKeyDistributionMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 iteration = 2;
  if (has_iteration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->iteration(), target);
  }

  // optional bytes chainKey = 3;
  if (has_chainkey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->chainkey(), target);
  }

  // optional bytes signingKey = 4;
  if (has_signingkey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->signingkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SenderKeyDistributionMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 iteration = 2;
    if (has_iteration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iteration());
    }

    // optional bytes chainKey = 3;
    if (has_chainkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->chainkey());
    }

    // optional bytes signingKey = 4;
    if (has_signingkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signingkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SenderKeyDistributionMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SenderKeyDistributionMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SenderKeyDistributionMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SenderKeyDistributionMessage::MergeFrom(const SenderKeyDistributionMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_iteration()) {
      set_iteration(from.iteration());
    }
    if (from.has_chainkey()) {
      set_chainkey(from.chainkey());
    }
    if (from.has_signingkey()) {
      set_signingkey(from.signingkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SenderKeyDistributionMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SenderKeyDistributionMessage::CopyFrom(const SenderKeyDistributionMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SenderKeyDistributionMessage::IsInitialized() const {

  return true;
}

void SenderKeyDistributionMessage::Swap(SenderKeyDistributionMessage* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(iteration_, other->iteration_);
    std::swap(chainkey_, other->chainkey_);
    std::swap(signingkey_, other->signingkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SenderKeyDistributionMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SenderKeyDistributionMessage_descriptor_;
  metadata.reflection = SenderKeyDistributionMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace textsecure

// @@protoc_insertion_point(global_scope)
