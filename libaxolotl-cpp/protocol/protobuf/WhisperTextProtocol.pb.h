// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf/WhisperTextProtocol.proto

#ifndef PROTOBUF_protobuf_2fWhisperTextProtocol_2eproto__INCLUDED
#define PROTOBUF_protobuf_2fWhisperTextProtocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace textsecure {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_protobuf_2fWhisperTextProtocol_2eproto();
void protobuf_AssignDesc_protobuf_2fWhisperTextProtocol_2eproto();
void protobuf_ShutdownFile_protobuf_2fWhisperTextProtocol_2eproto();

class WhisperMessage;
class PreKeyWhisperMessage;
class KeyExchangeMessage;
class SenderKeyMessage;
class SenderKeyDistributionMessage;

// ===================================================================

class WhisperMessage : public ::google::protobuf::Message {
 public:
  WhisperMessage();
  virtual ~WhisperMessage();

  WhisperMessage(const WhisperMessage& from);

  inline WhisperMessage& operator=(const WhisperMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WhisperMessage& default_instance();

  void Swap(WhisperMessage* other);

  // implements Message ----------------------------------------------

  WhisperMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WhisperMessage& from);
  void MergeFrom(const WhisperMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes ratchetKey = 1;
  inline bool has_ratchetkey() const;
  inline void clear_ratchetkey();
  static const int kRatchetKeyFieldNumber = 1;
  inline const ::std::string& ratchetkey() const;
  inline void set_ratchetkey(const ::std::string& value);
  inline void set_ratchetkey(const char* value);
  inline void set_ratchetkey(const void* value, size_t size);
  inline ::std::string* mutable_ratchetkey();
  inline ::std::string* release_ratchetkey();
  inline void set_allocated_ratchetkey(::std::string* ratchetkey);

  // optional uint32 counter = 2;
  inline bool has_counter() const;
  inline void clear_counter();
  static const int kCounterFieldNumber = 2;
  inline ::google::protobuf::uint32 counter() const;
  inline void set_counter(::google::protobuf::uint32 value);

  // optional uint32 previousCounter = 3;
  inline bool has_previouscounter() const;
  inline void clear_previouscounter();
  static const int kPreviousCounterFieldNumber = 3;
  inline ::google::protobuf::uint32 previouscounter() const;
  inline void set_previouscounter(::google::protobuf::uint32 value);

  // optional bytes ciphertext = 4;
  inline bool has_ciphertext() const;
  inline void clear_ciphertext();
  static const int kCiphertextFieldNumber = 4;
  inline const ::std::string& ciphertext() const;
  inline void set_ciphertext(const ::std::string& value);
  inline void set_ciphertext(const char* value);
  inline void set_ciphertext(const void* value, size_t size);
  inline ::std::string* mutable_ciphertext();
  inline ::std::string* release_ciphertext();
  inline void set_allocated_ciphertext(::std::string* ciphertext);

  // @@protoc_insertion_point(class_scope:textsecure.WhisperMessage)
 private:
  inline void set_has_ratchetkey();
  inline void clear_has_ratchetkey();
  inline void set_has_counter();
  inline void clear_has_counter();
  inline void set_has_previouscounter();
  inline void clear_has_previouscounter();
  inline void set_has_ciphertext();
  inline void clear_has_ciphertext();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ratchetkey_;
  ::google::protobuf::uint32 counter_;
  ::google::protobuf::uint32 previouscounter_;
  ::std::string* ciphertext_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_protobuf_2fWhisperTextProtocol_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fWhisperTextProtocol_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fWhisperTextProtocol_2eproto();

  void InitAsDefaultInstance();
  static WhisperMessage* default_instance_;
};
// -------------------------------------------------------------------

class PreKeyWhisperMessage : public ::google::protobuf::Message {
 public:
  PreKeyWhisperMessage();
  virtual ~PreKeyWhisperMessage();

  PreKeyWhisperMessage(const PreKeyWhisperMessage& from);

  inline PreKeyWhisperMessage& operator=(const PreKeyWhisperMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PreKeyWhisperMessage& default_instance();

  void Swap(PreKeyWhisperMessage* other);

  // implements Message ----------------------------------------------

  PreKeyWhisperMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PreKeyWhisperMessage& from);
  void MergeFrom(const PreKeyWhisperMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 registrationId = 5;
  inline bool has_registrationid() const;
  inline void clear_registrationid();
  static const int kRegistrationIdFieldNumber = 5;
  inline ::google::protobuf::uint32 registrationid() const;
  inline void set_registrationid(::google::protobuf::uint32 value);

  // optional uint32 preKeyId = 1;
  inline bool has_prekeyid() const;
  inline void clear_prekeyid();
  static const int kPreKeyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 prekeyid() const;
  inline void set_prekeyid(::google::protobuf::uint32 value);

  // optional uint32 signedPreKeyId = 6;
  inline bool has_signedprekeyid() const;
  inline void clear_signedprekeyid();
  static const int kSignedPreKeyIdFieldNumber = 6;
  inline ::google::protobuf::uint32 signedprekeyid() const;
  inline void set_signedprekeyid(::google::protobuf::uint32 value);

  // optional bytes baseKey = 2;
  inline bool has_basekey() const;
  inline void clear_basekey();
  static const int kBaseKeyFieldNumber = 2;
  inline const ::std::string& basekey() const;
  inline void set_basekey(const ::std::string& value);
  inline void set_basekey(const char* value);
  inline void set_basekey(const void* value, size_t size);
  inline ::std::string* mutable_basekey();
  inline ::std::string* release_basekey();
  inline void set_allocated_basekey(::std::string* basekey);

  // optional bytes identityKey = 3;
  inline bool has_identitykey() const;
  inline void clear_identitykey();
  static const int kIdentityKeyFieldNumber = 3;
  inline const ::std::string& identitykey() const;
  inline void set_identitykey(const ::std::string& value);
  inline void set_identitykey(const char* value);
  inline void set_identitykey(const void* value, size_t size);
  inline ::std::string* mutable_identitykey();
  inline ::std::string* release_identitykey();
  inline void set_allocated_identitykey(::std::string* identitykey);

  // optional bytes message = 4;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 4;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const void* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:textsecure.PreKeyWhisperMessage)
 private:
  inline void set_has_registrationid();
  inline void clear_has_registrationid();
  inline void set_has_prekeyid();
  inline void clear_has_prekeyid();
  inline void set_has_signedprekeyid();
  inline void clear_has_signedprekeyid();
  inline void set_has_basekey();
  inline void clear_has_basekey();
  inline void set_has_identitykey();
  inline void clear_has_identitykey();
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 registrationid_;
  ::google::protobuf::uint32 prekeyid_;
  ::std::string* basekey_;
  ::std::string* identitykey_;
  ::std::string* message_;
  ::google::protobuf::uint32 signedprekeyid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_protobuf_2fWhisperTextProtocol_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fWhisperTextProtocol_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fWhisperTextProtocol_2eproto();

  void InitAsDefaultInstance();
  static PreKeyWhisperMessage* default_instance_;
};
// -------------------------------------------------------------------

class KeyExchangeMessage : public ::google::protobuf::Message {
 public:
  KeyExchangeMessage();
  virtual ~KeyExchangeMessage();

  KeyExchangeMessage(const KeyExchangeMessage& from);

  inline KeyExchangeMessage& operator=(const KeyExchangeMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyExchangeMessage& default_instance();

  void Swap(KeyExchangeMessage* other);

  // implements Message ----------------------------------------------

  KeyExchangeMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeyExchangeMessage& from);
  void MergeFrom(const KeyExchangeMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional bytes baseKey = 2;
  inline bool has_basekey() const;
  inline void clear_basekey();
  static const int kBaseKeyFieldNumber = 2;
  inline const ::std::string& basekey() const;
  inline void set_basekey(const ::std::string& value);
  inline void set_basekey(const char* value);
  inline void set_basekey(const void* value, size_t size);
  inline ::std::string* mutable_basekey();
  inline ::std::string* release_basekey();
  inline void set_allocated_basekey(::std::string* basekey);

  // optional bytes ratchetKey = 3;
  inline bool has_ratchetkey() const;
  inline void clear_ratchetkey();
  static const int kRatchetKeyFieldNumber = 3;
  inline const ::std::string& ratchetkey() const;
  inline void set_ratchetkey(const ::std::string& value);
  inline void set_ratchetkey(const char* value);
  inline void set_ratchetkey(const void* value, size_t size);
  inline ::std::string* mutable_ratchetkey();
  inline ::std::string* release_ratchetkey();
  inline void set_allocated_ratchetkey(::std::string* ratchetkey);

  // optional bytes identityKey = 4;
  inline bool has_identitykey() const;
  inline void clear_identitykey();
  static const int kIdentityKeyFieldNumber = 4;
  inline const ::std::string& identitykey() const;
  inline void set_identitykey(const ::std::string& value);
  inline void set_identitykey(const char* value);
  inline void set_identitykey(const void* value, size_t size);
  inline ::std::string* mutable_identitykey();
  inline ::std::string* release_identitykey();
  inline void set_allocated_identitykey(::std::string* identitykey);

  // optional bytes baseKeySignature = 5;
  inline bool has_basekeysignature() const;
  inline void clear_basekeysignature();
  static const int kBaseKeySignatureFieldNumber = 5;
  inline const ::std::string& basekeysignature() const;
  inline void set_basekeysignature(const ::std::string& value);
  inline void set_basekeysignature(const char* value);
  inline void set_basekeysignature(const void* value, size_t size);
  inline ::std::string* mutable_basekeysignature();
  inline ::std::string* release_basekeysignature();
  inline void set_allocated_basekeysignature(::std::string* basekeysignature);

  // @@protoc_insertion_point(class_scope:textsecure.KeyExchangeMessage)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_basekey();
  inline void clear_has_basekey();
  inline void set_has_ratchetkey();
  inline void clear_has_ratchetkey();
  inline void set_has_identitykey();
  inline void clear_has_identitykey();
  inline void set_has_basekeysignature();
  inline void clear_has_basekeysignature();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* basekey_;
  ::std::string* ratchetkey_;
  ::std::string* identitykey_;
  ::std::string* basekeysignature_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_protobuf_2fWhisperTextProtocol_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fWhisperTextProtocol_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fWhisperTextProtocol_2eproto();

  void InitAsDefaultInstance();
  static KeyExchangeMessage* default_instance_;
};
// -------------------------------------------------------------------

class SenderKeyMessage : public ::google::protobuf::Message {
 public:
  SenderKeyMessage();
  virtual ~SenderKeyMessage();

  SenderKeyMessage(const SenderKeyMessage& from);

  inline SenderKeyMessage& operator=(const SenderKeyMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SenderKeyMessage& default_instance();

  void Swap(SenderKeyMessage* other);

  // implements Message ----------------------------------------------

  SenderKeyMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SenderKeyMessage& from);
  void MergeFrom(const SenderKeyMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 iteration = 2;
  inline bool has_iteration() const;
  inline void clear_iteration();
  static const int kIterationFieldNumber = 2;
  inline ::google::protobuf::uint32 iteration() const;
  inline void set_iteration(::google::protobuf::uint32 value);

  // optional bytes ciphertext = 3;
  inline bool has_ciphertext() const;
  inline void clear_ciphertext();
  static const int kCiphertextFieldNumber = 3;
  inline const ::std::string& ciphertext() const;
  inline void set_ciphertext(const ::std::string& value);
  inline void set_ciphertext(const char* value);
  inline void set_ciphertext(const void* value, size_t size);
  inline ::std::string* mutable_ciphertext();
  inline ::std::string* release_ciphertext();
  inline void set_allocated_ciphertext(::std::string* ciphertext);

  // @@protoc_insertion_point(class_scope:textsecure.SenderKeyMessage)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_iteration();
  inline void clear_has_iteration();
  inline void set_has_ciphertext();
  inline void clear_has_ciphertext();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 iteration_;
  ::std::string* ciphertext_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protobuf_2fWhisperTextProtocol_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fWhisperTextProtocol_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fWhisperTextProtocol_2eproto();

  void InitAsDefaultInstance();
  static SenderKeyMessage* default_instance_;
};
// -------------------------------------------------------------------

class SenderKeyDistributionMessage : public ::google::protobuf::Message {
 public:
  SenderKeyDistributionMessage();
  virtual ~SenderKeyDistributionMessage();

  SenderKeyDistributionMessage(const SenderKeyDistributionMessage& from);

  inline SenderKeyDistributionMessage& operator=(const SenderKeyDistributionMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SenderKeyDistributionMessage& default_instance();

  void Swap(SenderKeyDistributionMessage* other);

  // implements Message ----------------------------------------------

  SenderKeyDistributionMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SenderKeyDistributionMessage& from);
  void MergeFrom(const SenderKeyDistributionMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 iteration = 2;
  inline bool has_iteration() const;
  inline void clear_iteration();
  static const int kIterationFieldNumber = 2;
  inline ::google::protobuf::uint32 iteration() const;
  inline void set_iteration(::google::protobuf::uint32 value);

  // optional bytes chainKey = 3;
  inline bool has_chainkey() const;
  inline void clear_chainkey();
  static const int kChainKeyFieldNumber = 3;
  inline const ::std::string& chainkey() const;
  inline void set_chainkey(const ::std::string& value);
  inline void set_chainkey(const char* value);
  inline void set_chainkey(const void* value, size_t size);
  inline ::std::string* mutable_chainkey();
  inline ::std::string* release_chainkey();
  inline void set_allocated_chainkey(::std::string* chainkey);

  // optional bytes signingKey = 4;
  inline bool has_signingkey() const;
  inline void clear_signingkey();
  static const int kSigningKeyFieldNumber = 4;
  inline const ::std::string& signingkey() const;
  inline void set_signingkey(const ::std::string& value);
  inline void set_signingkey(const char* value);
  inline void set_signingkey(const void* value, size_t size);
  inline ::std::string* mutable_signingkey();
  inline ::std::string* release_signingkey();
  inline void set_allocated_signingkey(::std::string* signingkey);

  // @@protoc_insertion_point(class_scope:textsecure.SenderKeyDistributionMessage)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_iteration();
  inline void clear_has_iteration();
  inline void set_has_chainkey();
  inline void clear_has_chainkey();
  inline void set_has_signingkey();
  inline void clear_has_signingkey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 iteration_;
  ::std::string* chainkey_;
  ::std::string* signingkey_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_protobuf_2fWhisperTextProtocol_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fWhisperTextProtocol_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fWhisperTextProtocol_2eproto();

  void InitAsDefaultInstance();
  static SenderKeyDistributionMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// WhisperMessage

// optional bytes ratchetKey = 1;
inline bool WhisperMessage::has_ratchetkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WhisperMessage::set_has_ratchetkey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WhisperMessage::clear_has_ratchetkey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WhisperMessage::clear_ratchetkey() {
  if (ratchetkey_ != &::google::protobuf::internal::kEmptyString) {
    ratchetkey_->clear();
  }
  clear_has_ratchetkey();
}
inline const ::std::string& WhisperMessage::ratchetkey() const {
  return *ratchetkey_;
}
inline void WhisperMessage::set_ratchetkey(const ::std::string& value) {
  set_has_ratchetkey();
  if (ratchetkey_ == &::google::protobuf::internal::kEmptyString) {
    ratchetkey_ = new ::std::string;
  }
  ratchetkey_->assign(value);
}
inline void WhisperMessage::set_ratchetkey(const char* value) {
  set_has_ratchetkey();
  if (ratchetkey_ == &::google::protobuf::internal::kEmptyString) {
    ratchetkey_ = new ::std::string;
  }
  ratchetkey_->assign(value);
}
inline void WhisperMessage::set_ratchetkey(const void* value, size_t size) {
  set_has_ratchetkey();
  if (ratchetkey_ == &::google::protobuf::internal::kEmptyString) {
    ratchetkey_ = new ::std::string;
  }
  ratchetkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WhisperMessage::mutable_ratchetkey() {
  set_has_ratchetkey();
  if (ratchetkey_ == &::google::protobuf::internal::kEmptyString) {
    ratchetkey_ = new ::std::string;
  }
  return ratchetkey_;
}
inline ::std::string* WhisperMessage::release_ratchetkey() {
  clear_has_ratchetkey();
  if (ratchetkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ratchetkey_;
    ratchetkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WhisperMessage::set_allocated_ratchetkey(::std::string* ratchetkey) {
  if (ratchetkey_ != &::google::protobuf::internal::kEmptyString) {
    delete ratchetkey_;
  }
  if (ratchetkey) {
    set_has_ratchetkey();
    ratchetkey_ = ratchetkey;
  } else {
    clear_has_ratchetkey();
    ratchetkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 counter = 2;
inline bool WhisperMessage::has_counter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WhisperMessage::set_has_counter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WhisperMessage::clear_has_counter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WhisperMessage::clear_counter() {
  counter_ = 0u;
  clear_has_counter();
}
inline ::google::protobuf::uint32 WhisperMessage::counter() const {
  return counter_;
}
inline void WhisperMessage::set_counter(::google::protobuf::uint32 value) {
  set_has_counter();
  counter_ = value;
}

// optional uint32 previousCounter = 3;
inline bool WhisperMessage::has_previouscounter() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WhisperMessage::set_has_previouscounter() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WhisperMessage::clear_has_previouscounter() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WhisperMessage::clear_previouscounter() {
  previouscounter_ = 0u;
  clear_has_previouscounter();
}
inline ::google::protobuf::uint32 WhisperMessage::previouscounter() const {
  return previouscounter_;
}
inline void WhisperMessage::set_previouscounter(::google::protobuf::uint32 value) {
  set_has_previouscounter();
  previouscounter_ = value;
}

// optional bytes ciphertext = 4;
inline bool WhisperMessage::has_ciphertext() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WhisperMessage::set_has_ciphertext() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WhisperMessage::clear_has_ciphertext() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WhisperMessage::clear_ciphertext() {
  if (ciphertext_ != &::google::protobuf::internal::kEmptyString) {
    ciphertext_->clear();
  }
  clear_has_ciphertext();
}
inline const ::std::string& WhisperMessage::ciphertext() const {
  return *ciphertext_;
}
inline void WhisperMessage::set_ciphertext(const ::std::string& value) {
  set_has_ciphertext();
  if (ciphertext_ == &::google::protobuf::internal::kEmptyString) {
    ciphertext_ = new ::std::string;
  }
  ciphertext_->assign(value);
}
inline void WhisperMessage::set_ciphertext(const char* value) {
  set_has_ciphertext();
  if (ciphertext_ == &::google::protobuf::internal::kEmptyString) {
    ciphertext_ = new ::std::string;
  }
  ciphertext_->assign(value);
}
inline void WhisperMessage::set_ciphertext(const void* value, size_t size) {
  set_has_ciphertext();
  if (ciphertext_ == &::google::protobuf::internal::kEmptyString) {
    ciphertext_ = new ::std::string;
  }
  ciphertext_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WhisperMessage::mutable_ciphertext() {
  set_has_ciphertext();
  if (ciphertext_ == &::google::protobuf::internal::kEmptyString) {
    ciphertext_ = new ::std::string;
  }
  return ciphertext_;
}
inline ::std::string* WhisperMessage::release_ciphertext() {
  clear_has_ciphertext();
  if (ciphertext_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ciphertext_;
    ciphertext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WhisperMessage::set_allocated_ciphertext(::std::string* ciphertext) {
  if (ciphertext_ != &::google::protobuf::internal::kEmptyString) {
    delete ciphertext_;
  }
  if (ciphertext) {
    set_has_ciphertext();
    ciphertext_ = ciphertext;
  } else {
    clear_has_ciphertext();
    ciphertext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PreKeyWhisperMessage

// optional uint32 registrationId = 5;
inline bool PreKeyWhisperMessage::has_registrationid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PreKeyWhisperMessage::set_has_registrationid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PreKeyWhisperMessage::clear_has_registrationid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PreKeyWhisperMessage::clear_registrationid() {
  registrationid_ = 0u;
  clear_has_registrationid();
}
inline ::google::protobuf::uint32 PreKeyWhisperMessage::registrationid() const {
  return registrationid_;
}
inline void PreKeyWhisperMessage::set_registrationid(::google::protobuf::uint32 value) {
  set_has_registrationid();
  registrationid_ = value;
}

// optional uint32 preKeyId = 1;
inline bool PreKeyWhisperMessage::has_prekeyid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PreKeyWhisperMessage::set_has_prekeyid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PreKeyWhisperMessage::clear_has_prekeyid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PreKeyWhisperMessage::clear_prekeyid() {
  prekeyid_ = 0u;
  clear_has_prekeyid();
}
inline ::google::protobuf::uint32 PreKeyWhisperMessage::prekeyid() const {
  return prekeyid_;
}
inline void PreKeyWhisperMessage::set_prekeyid(::google::protobuf::uint32 value) {
  set_has_prekeyid();
  prekeyid_ = value;
}

// optional uint32 signedPreKeyId = 6;
inline bool PreKeyWhisperMessage::has_signedprekeyid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PreKeyWhisperMessage::set_has_signedprekeyid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PreKeyWhisperMessage::clear_has_signedprekeyid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PreKeyWhisperMessage::clear_signedprekeyid() {
  signedprekeyid_ = 0u;
  clear_has_signedprekeyid();
}
inline ::google::protobuf::uint32 PreKeyWhisperMessage::signedprekeyid() const {
  return signedprekeyid_;
}
inline void PreKeyWhisperMessage::set_signedprekeyid(::google::protobuf::uint32 value) {
  set_has_signedprekeyid();
  signedprekeyid_ = value;
}

// optional bytes baseKey = 2;
inline bool PreKeyWhisperMessage::has_basekey() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PreKeyWhisperMessage::set_has_basekey() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PreKeyWhisperMessage::clear_has_basekey() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PreKeyWhisperMessage::clear_basekey() {
  if (basekey_ != &::google::protobuf::internal::kEmptyString) {
    basekey_->clear();
  }
  clear_has_basekey();
}
inline const ::std::string& PreKeyWhisperMessage::basekey() const {
  return *basekey_;
}
inline void PreKeyWhisperMessage::set_basekey(const ::std::string& value) {
  set_has_basekey();
  if (basekey_ == &::google::protobuf::internal::kEmptyString) {
    basekey_ = new ::std::string;
  }
  basekey_->assign(value);
}
inline void PreKeyWhisperMessage::set_basekey(const char* value) {
  set_has_basekey();
  if (basekey_ == &::google::protobuf::internal::kEmptyString) {
    basekey_ = new ::std::string;
  }
  basekey_->assign(value);
}
inline void PreKeyWhisperMessage::set_basekey(const void* value, size_t size) {
  set_has_basekey();
  if (basekey_ == &::google::protobuf::internal::kEmptyString) {
    basekey_ = new ::std::string;
  }
  basekey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PreKeyWhisperMessage::mutable_basekey() {
  set_has_basekey();
  if (basekey_ == &::google::protobuf::internal::kEmptyString) {
    basekey_ = new ::std::string;
  }
  return basekey_;
}
inline ::std::string* PreKeyWhisperMessage::release_basekey() {
  clear_has_basekey();
  if (basekey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = basekey_;
    basekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PreKeyWhisperMessage::set_allocated_basekey(::std::string* basekey) {
  if (basekey_ != &::google::protobuf::internal::kEmptyString) {
    delete basekey_;
  }
  if (basekey) {
    set_has_basekey();
    basekey_ = basekey;
  } else {
    clear_has_basekey();
    basekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes identityKey = 3;
inline bool PreKeyWhisperMessage::has_identitykey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PreKeyWhisperMessage::set_has_identitykey() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PreKeyWhisperMessage::clear_has_identitykey() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PreKeyWhisperMessage::clear_identitykey() {
  if (identitykey_ != &::google::protobuf::internal::kEmptyString) {
    identitykey_->clear();
  }
  clear_has_identitykey();
}
inline const ::std::string& PreKeyWhisperMessage::identitykey() const {
  return *identitykey_;
}
inline void PreKeyWhisperMessage::set_identitykey(const ::std::string& value) {
  set_has_identitykey();
  if (identitykey_ == &::google::protobuf::internal::kEmptyString) {
    identitykey_ = new ::std::string;
  }
  identitykey_->assign(value);
}
inline void PreKeyWhisperMessage::set_identitykey(const char* value) {
  set_has_identitykey();
  if (identitykey_ == &::google::protobuf::internal::kEmptyString) {
    identitykey_ = new ::std::string;
  }
  identitykey_->assign(value);
}
inline void PreKeyWhisperMessage::set_identitykey(const void* value, size_t size) {
  set_has_identitykey();
  if (identitykey_ == &::google::protobuf::internal::kEmptyString) {
    identitykey_ = new ::std::string;
  }
  identitykey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PreKeyWhisperMessage::mutable_identitykey() {
  set_has_identitykey();
  if (identitykey_ == &::google::protobuf::internal::kEmptyString) {
    identitykey_ = new ::std::string;
  }
  return identitykey_;
}
inline ::std::string* PreKeyWhisperMessage::release_identitykey() {
  clear_has_identitykey();
  if (identitykey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = identitykey_;
    identitykey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PreKeyWhisperMessage::set_allocated_identitykey(::std::string* identitykey) {
  if (identitykey_ != &::google::protobuf::internal::kEmptyString) {
    delete identitykey_;
  }
  if (identitykey) {
    set_has_identitykey();
    identitykey_ = identitykey;
  } else {
    clear_has_identitykey();
    identitykey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes message = 4;
inline bool PreKeyWhisperMessage::has_message() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PreKeyWhisperMessage::set_has_message() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PreKeyWhisperMessage::clear_has_message() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PreKeyWhisperMessage::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& PreKeyWhisperMessage::message() const {
  return *message_;
}
inline void PreKeyWhisperMessage::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void PreKeyWhisperMessage::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void PreKeyWhisperMessage::set_message(const void* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PreKeyWhisperMessage::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* PreKeyWhisperMessage::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PreKeyWhisperMessage::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// KeyExchangeMessage

// optional uint32 id = 1;
inline bool KeyExchangeMessage::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KeyExchangeMessage::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KeyExchangeMessage::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KeyExchangeMessage::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 KeyExchangeMessage::id() const {
  return id_;
}
inline void KeyExchangeMessage::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional bytes baseKey = 2;
inline bool KeyExchangeMessage::has_basekey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KeyExchangeMessage::set_has_basekey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KeyExchangeMessage::clear_has_basekey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KeyExchangeMessage::clear_basekey() {
  if (basekey_ != &::google::protobuf::internal::kEmptyString) {
    basekey_->clear();
  }
  clear_has_basekey();
}
inline const ::std::string& KeyExchangeMessage::basekey() const {
  return *basekey_;
}
inline void KeyExchangeMessage::set_basekey(const ::std::string& value) {
  set_has_basekey();
  if (basekey_ == &::google::protobuf::internal::kEmptyString) {
    basekey_ = new ::std::string;
  }
  basekey_->assign(value);
}
inline void KeyExchangeMessage::set_basekey(const char* value) {
  set_has_basekey();
  if (basekey_ == &::google::protobuf::internal::kEmptyString) {
    basekey_ = new ::std::string;
  }
  basekey_->assign(value);
}
inline void KeyExchangeMessage::set_basekey(const void* value, size_t size) {
  set_has_basekey();
  if (basekey_ == &::google::protobuf::internal::kEmptyString) {
    basekey_ = new ::std::string;
  }
  basekey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KeyExchangeMessage::mutable_basekey() {
  set_has_basekey();
  if (basekey_ == &::google::protobuf::internal::kEmptyString) {
    basekey_ = new ::std::string;
  }
  return basekey_;
}
inline ::std::string* KeyExchangeMessage::release_basekey() {
  clear_has_basekey();
  if (basekey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = basekey_;
    basekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void KeyExchangeMessage::set_allocated_basekey(::std::string* basekey) {
  if (basekey_ != &::google::protobuf::internal::kEmptyString) {
    delete basekey_;
  }
  if (basekey) {
    set_has_basekey();
    basekey_ = basekey;
  } else {
    clear_has_basekey();
    basekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes ratchetKey = 3;
inline bool KeyExchangeMessage::has_ratchetkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KeyExchangeMessage::set_has_ratchetkey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KeyExchangeMessage::clear_has_ratchetkey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KeyExchangeMessage::clear_ratchetkey() {
  if (ratchetkey_ != &::google::protobuf::internal::kEmptyString) {
    ratchetkey_->clear();
  }
  clear_has_ratchetkey();
}
inline const ::std::string& KeyExchangeMessage::ratchetkey() const {
  return *ratchetkey_;
}
inline void KeyExchangeMessage::set_ratchetkey(const ::std::string& value) {
  set_has_ratchetkey();
  if (ratchetkey_ == &::google::protobuf::internal::kEmptyString) {
    ratchetkey_ = new ::std::string;
  }
  ratchetkey_->assign(value);
}
inline void KeyExchangeMessage::set_ratchetkey(const char* value) {
  set_has_ratchetkey();
  if (ratchetkey_ == &::google::protobuf::internal::kEmptyString) {
    ratchetkey_ = new ::std::string;
  }
  ratchetkey_->assign(value);
}
inline void KeyExchangeMessage::set_ratchetkey(const void* value, size_t size) {
  set_has_ratchetkey();
  if (ratchetkey_ == &::google::protobuf::internal::kEmptyString) {
    ratchetkey_ = new ::std::string;
  }
  ratchetkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KeyExchangeMessage::mutable_ratchetkey() {
  set_has_ratchetkey();
  if (ratchetkey_ == &::google::protobuf::internal::kEmptyString) {
    ratchetkey_ = new ::std::string;
  }
  return ratchetkey_;
}
inline ::std::string* KeyExchangeMessage::release_ratchetkey() {
  clear_has_ratchetkey();
  if (ratchetkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ratchetkey_;
    ratchetkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void KeyExchangeMessage::set_allocated_ratchetkey(::std::string* ratchetkey) {
  if (ratchetkey_ != &::google::protobuf::internal::kEmptyString) {
    delete ratchetkey_;
  }
  if (ratchetkey) {
    set_has_ratchetkey();
    ratchetkey_ = ratchetkey;
  } else {
    clear_has_ratchetkey();
    ratchetkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes identityKey = 4;
inline bool KeyExchangeMessage::has_identitykey() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void KeyExchangeMessage::set_has_identitykey() {
  _has_bits_[0] |= 0x00000008u;
}
inline void KeyExchangeMessage::clear_has_identitykey() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void KeyExchangeMessage::clear_identitykey() {
  if (identitykey_ != &::google::protobuf::internal::kEmptyString) {
    identitykey_->clear();
  }
  clear_has_identitykey();
}
inline const ::std::string& KeyExchangeMessage::identitykey() const {
  return *identitykey_;
}
inline void KeyExchangeMessage::set_identitykey(const ::std::string& value) {
  set_has_identitykey();
  if (identitykey_ == &::google::protobuf::internal::kEmptyString) {
    identitykey_ = new ::std::string;
  }
  identitykey_->assign(value);
}
inline void KeyExchangeMessage::set_identitykey(const char* value) {
  set_has_identitykey();
  if (identitykey_ == &::google::protobuf::internal::kEmptyString) {
    identitykey_ = new ::std::string;
  }
  identitykey_->assign(value);
}
inline void KeyExchangeMessage::set_identitykey(const void* value, size_t size) {
  set_has_identitykey();
  if (identitykey_ == &::google::protobuf::internal::kEmptyString) {
    identitykey_ = new ::std::string;
  }
  identitykey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KeyExchangeMessage::mutable_identitykey() {
  set_has_identitykey();
  if (identitykey_ == &::google::protobuf::internal::kEmptyString) {
    identitykey_ = new ::std::string;
  }
  return identitykey_;
}
inline ::std::string* KeyExchangeMessage::release_identitykey() {
  clear_has_identitykey();
  if (identitykey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = identitykey_;
    identitykey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void KeyExchangeMessage::set_allocated_identitykey(::std::string* identitykey) {
  if (identitykey_ != &::google::protobuf::internal::kEmptyString) {
    delete identitykey_;
  }
  if (identitykey) {
    set_has_identitykey();
    identitykey_ = identitykey;
  } else {
    clear_has_identitykey();
    identitykey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes baseKeySignature = 5;
inline bool KeyExchangeMessage::has_basekeysignature() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void KeyExchangeMessage::set_has_basekeysignature() {
  _has_bits_[0] |= 0x00000010u;
}
inline void KeyExchangeMessage::clear_has_basekeysignature() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void KeyExchangeMessage::clear_basekeysignature() {
  if (basekeysignature_ != &::google::protobuf::internal::kEmptyString) {
    basekeysignature_->clear();
  }
  clear_has_basekeysignature();
}
inline const ::std::string& KeyExchangeMessage::basekeysignature() const {
  return *basekeysignature_;
}
inline void KeyExchangeMessage::set_basekeysignature(const ::std::string& value) {
  set_has_basekeysignature();
  if (basekeysignature_ == &::google::protobuf::internal::kEmptyString) {
    basekeysignature_ = new ::std::string;
  }
  basekeysignature_->assign(value);
}
inline void KeyExchangeMessage::set_basekeysignature(const char* value) {
  set_has_basekeysignature();
  if (basekeysignature_ == &::google::protobuf::internal::kEmptyString) {
    basekeysignature_ = new ::std::string;
  }
  basekeysignature_->assign(value);
}
inline void KeyExchangeMessage::set_basekeysignature(const void* value, size_t size) {
  set_has_basekeysignature();
  if (basekeysignature_ == &::google::protobuf::internal::kEmptyString) {
    basekeysignature_ = new ::std::string;
  }
  basekeysignature_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KeyExchangeMessage::mutable_basekeysignature() {
  set_has_basekeysignature();
  if (basekeysignature_ == &::google::protobuf::internal::kEmptyString) {
    basekeysignature_ = new ::std::string;
  }
  return basekeysignature_;
}
inline ::std::string* KeyExchangeMessage::release_basekeysignature() {
  clear_has_basekeysignature();
  if (basekeysignature_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = basekeysignature_;
    basekeysignature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void KeyExchangeMessage::set_allocated_basekeysignature(::std::string* basekeysignature) {
  if (basekeysignature_ != &::google::protobuf::internal::kEmptyString) {
    delete basekeysignature_;
  }
  if (basekeysignature) {
    set_has_basekeysignature();
    basekeysignature_ = basekeysignature;
  } else {
    clear_has_basekeysignature();
    basekeysignature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SenderKeyMessage

// optional uint32 id = 1;
inline bool SenderKeyMessage::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SenderKeyMessage::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SenderKeyMessage::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SenderKeyMessage::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 SenderKeyMessage::id() const {
  return id_;
}
inline void SenderKeyMessage::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 iteration = 2;
inline bool SenderKeyMessage::has_iteration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SenderKeyMessage::set_has_iteration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SenderKeyMessage::clear_has_iteration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SenderKeyMessage::clear_iteration() {
  iteration_ = 0u;
  clear_has_iteration();
}
inline ::google::protobuf::uint32 SenderKeyMessage::iteration() const {
  return iteration_;
}
inline void SenderKeyMessage::set_iteration(::google::protobuf::uint32 value) {
  set_has_iteration();
  iteration_ = value;
}

// optional bytes ciphertext = 3;
inline bool SenderKeyMessage::has_ciphertext() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SenderKeyMessage::set_has_ciphertext() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SenderKeyMessage::clear_has_ciphertext() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SenderKeyMessage::clear_ciphertext() {
  if (ciphertext_ != &::google::protobuf::internal::kEmptyString) {
    ciphertext_->clear();
  }
  clear_has_ciphertext();
}
inline const ::std::string& SenderKeyMessage::ciphertext() const {
  return *ciphertext_;
}
inline void SenderKeyMessage::set_ciphertext(const ::std::string& value) {
  set_has_ciphertext();
  if (ciphertext_ == &::google::protobuf::internal::kEmptyString) {
    ciphertext_ = new ::std::string;
  }
  ciphertext_->assign(value);
}
inline void SenderKeyMessage::set_ciphertext(const char* value) {
  set_has_ciphertext();
  if (ciphertext_ == &::google::protobuf::internal::kEmptyString) {
    ciphertext_ = new ::std::string;
  }
  ciphertext_->assign(value);
}
inline void SenderKeyMessage::set_ciphertext(const void* value, size_t size) {
  set_has_ciphertext();
  if (ciphertext_ == &::google::protobuf::internal::kEmptyString) {
    ciphertext_ = new ::std::string;
  }
  ciphertext_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SenderKeyMessage::mutable_ciphertext() {
  set_has_ciphertext();
  if (ciphertext_ == &::google::protobuf::internal::kEmptyString) {
    ciphertext_ = new ::std::string;
  }
  return ciphertext_;
}
inline ::std::string* SenderKeyMessage::release_ciphertext() {
  clear_has_ciphertext();
  if (ciphertext_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ciphertext_;
    ciphertext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SenderKeyMessage::set_allocated_ciphertext(::std::string* ciphertext) {
  if (ciphertext_ != &::google::protobuf::internal::kEmptyString) {
    delete ciphertext_;
  }
  if (ciphertext) {
    set_has_ciphertext();
    ciphertext_ = ciphertext;
  } else {
    clear_has_ciphertext();
    ciphertext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SenderKeyDistributionMessage

// optional uint32 id = 1;
inline bool SenderKeyDistributionMessage::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SenderKeyDistributionMessage::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SenderKeyDistributionMessage::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SenderKeyDistributionMessage::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 SenderKeyDistributionMessage::id() const {
  return id_;
}
inline void SenderKeyDistributionMessage::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 iteration = 2;
inline bool SenderKeyDistributionMessage::has_iteration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SenderKeyDistributionMessage::set_has_iteration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SenderKeyDistributionMessage::clear_has_iteration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SenderKeyDistributionMessage::clear_iteration() {
  iteration_ = 0u;
  clear_has_iteration();
}
inline ::google::protobuf::uint32 SenderKeyDistributionMessage::iteration() const {
  return iteration_;
}
inline void SenderKeyDistributionMessage::set_iteration(::google::protobuf::uint32 value) {
  set_has_iteration();
  iteration_ = value;
}

// optional bytes chainKey = 3;
inline bool SenderKeyDistributionMessage::has_chainkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SenderKeyDistributionMessage::set_has_chainkey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SenderKeyDistributionMessage::clear_has_chainkey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SenderKeyDistributionMessage::clear_chainkey() {
  if (chainkey_ != &::google::protobuf::internal::kEmptyString) {
    chainkey_->clear();
  }
  clear_has_chainkey();
}
inline const ::std::string& SenderKeyDistributionMessage::chainkey() const {
  return *chainkey_;
}
inline void SenderKeyDistributionMessage::set_chainkey(const ::std::string& value) {
  set_has_chainkey();
  if (chainkey_ == &::google::protobuf::internal::kEmptyString) {
    chainkey_ = new ::std::string;
  }
  chainkey_->assign(value);
}
inline void SenderKeyDistributionMessage::set_chainkey(const char* value) {
  set_has_chainkey();
  if (chainkey_ == &::google::protobuf::internal::kEmptyString) {
    chainkey_ = new ::std::string;
  }
  chainkey_->assign(value);
}
inline void SenderKeyDistributionMessage::set_chainkey(const void* value, size_t size) {
  set_has_chainkey();
  if (chainkey_ == &::google::protobuf::internal::kEmptyString) {
    chainkey_ = new ::std::string;
  }
  chainkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SenderKeyDistributionMessage::mutable_chainkey() {
  set_has_chainkey();
  if (chainkey_ == &::google::protobuf::internal::kEmptyString) {
    chainkey_ = new ::std::string;
  }
  return chainkey_;
}
inline ::std::string* SenderKeyDistributionMessage::release_chainkey() {
  clear_has_chainkey();
  if (chainkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = chainkey_;
    chainkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SenderKeyDistributionMessage::set_allocated_chainkey(::std::string* chainkey) {
  if (chainkey_ != &::google::protobuf::internal::kEmptyString) {
    delete chainkey_;
  }
  if (chainkey) {
    set_has_chainkey();
    chainkey_ = chainkey;
  } else {
    clear_has_chainkey();
    chainkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes signingKey = 4;
inline bool SenderKeyDistributionMessage::has_signingkey() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SenderKeyDistributionMessage::set_has_signingkey() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SenderKeyDistributionMessage::clear_has_signingkey() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SenderKeyDistributionMessage::clear_signingkey() {
  if (signingkey_ != &::google::protobuf::internal::kEmptyString) {
    signingkey_->clear();
  }
  clear_has_signingkey();
}
inline const ::std::string& SenderKeyDistributionMessage::signingkey() const {
  return *signingkey_;
}
inline void SenderKeyDistributionMessage::set_signingkey(const ::std::string& value) {
  set_has_signingkey();
  if (signingkey_ == &::google::protobuf::internal::kEmptyString) {
    signingkey_ = new ::std::string;
  }
  signingkey_->assign(value);
}
inline void SenderKeyDistributionMessage::set_signingkey(const char* value) {
  set_has_signingkey();
  if (signingkey_ == &::google::protobuf::internal::kEmptyString) {
    signingkey_ = new ::std::string;
  }
  signingkey_->assign(value);
}
inline void SenderKeyDistributionMessage::set_signingkey(const void* value, size_t size) {
  set_has_signingkey();
  if (signingkey_ == &::google::protobuf::internal::kEmptyString) {
    signingkey_ = new ::std::string;
  }
  signingkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SenderKeyDistributionMessage::mutable_signingkey() {
  set_has_signingkey();
  if (signingkey_ == &::google::protobuf::internal::kEmptyString) {
    signingkey_ = new ::std::string;
  }
  return signingkey_;
}
inline ::std::string* SenderKeyDistributionMessage::release_signingkey() {
  clear_has_signingkey();
  if (signingkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = signingkey_;
    signingkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SenderKeyDistributionMessage::set_allocated_signingkey(::std::string* signingkey) {
  if (signingkey_ != &::google::protobuf::internal::kEmptyString) {
    delete signingkey_;
  }
  if (signingkey) {
    set_has_signingkey();
    signingkey_ = signingkey;
  } else {
    clear_has_signingkey();
    signingkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace textsecure

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protobuf_2fWhisperTextProtocol_2eproto__INCLUDED
